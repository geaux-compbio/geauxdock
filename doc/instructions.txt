                  A LA-SiGMA Software Distribution
             GeauxDock: GPU Accelerated Molecular Docking
                          Version 20160328
              Copyright 2014 Louisiana State University
	      
This package contains codes and sample data for running molecular
docking simulation on multi-core CPU, or NVIDIA GPU. 
	      
For the latest version and other resources visit
http://lasigma.loni.org/package/dock/

LA-SiGMA, the Louisiana Alliance for Simulation-Guided Materials
Applications, is a statewide interdisciplinary collaboration of
material and computer scientists developing computational resources
tuned for the latest generation of accelerator-equipped systems. The
Alliance also develops graduate curricula and is engaged in multiple
outreach activities. Visit us at http://lasigma.loni.org .

This work was supported in part by the National Science Foundation
under the NSF EPSCoR Cooperative Agreement No. EPS-1003897 with
additional support from the Louisiana Board of Regents.

=== Description
GeauxDock is an ultra-fast automated docking program, designed to predict
how small ligands bind to pharmacologically relevant macromolecules.

GeauxDock  employs a novel hybrid force field and a Monte Carlo protocol for 
the efficient sampling of conformational space.

The GPU codes use features that are supported since Kepler-Generation Graphics 
processing unit(GPU), and been tunned for Kepler GK110 and Maxwell 2.0 GPUs.

GeauxDock has applications in:
1. ligand virtual screening
2. structure-based drug design
3. drug repositioning and polypharmacology


=== Purpose
The purpose of molecular docking is to predict the preferred orientation of 
small ligands within the binding sites of pharmacologically relevant 
macromolecules as well as to reliably estimate the associated strength of 
binding. GeauxDock simulates small molecule binding to proteins expanding the 
repertoire of tools for computer-aided structure-based drug discovery.

=== Specifications 
Compared to other ligand docking programs, GeauxDock offers several unique 
features:

1. A mixed-resolution of protein-ligand complexes. Ligands are treated at the 
atomic level, whereas proteins are coarse-grained representing individual 
residues by sets of effective points: the backbone alpha carbon, the geometric 
center of a peptide plate, and either one or two effective points representing 
the side chain (depending on the size).

2. A high tolerance to target structure deformations. As a consequence of the 
mixed-resolution, GeauxDock is fairly insensitive to distortions in protein 
structures. Thus, experimental structures in their apo conformational states as 
well as various quality protein models can be used as targets for small 
molecule docking.

3. A combined evolution/physics-based force field. The energy function 
implemented in GeauxDock integrates evolution- and physics-based components. 
The relative contribution of these terms depends on the amount of evolutionary 
information extracted from homologous complexes. In the absence of homologues, 
weaker evolutionary-derived restraints are compensated by the stronger 
contribution of physics-based energy terms.The capability of the force field to 
reproduce experimental ligand binding poses and the corresponding binding 
affinities was tested on the Astex/CCDC and BindingDB datasets of 
pharmacologically relevant protein-ligand complexes.

4. Monte Carlo sampling scheme. GeauxDock uses the Replica Exchange Monte Carlo 
algorithm to efficiently explore the conformational space of protein-ligand 
interactions. This protocol was optimized to rapidly discover near-native 
ligand configurations.

4. Computations on graphics processing units (GPU). GeauxDock is implemented in 
CUDA-C. The code exploits the coarse-grained parallelisms for multiple 
replicas; specifically, replica simulations are dispatched on multiple CUDA 
thread blocks. The computation of molecular interactions utilizes the 
fine-grained parallelism using massive CUDA threads.


=== Prerequisites

GeauxDock has been tested on the following OS:

  Red Hat Enterprise Linux Version 6.5
  Red Hat Enterprise Linux Server release 6.2

GeauxDock has been tested with the following packages:

  CUDA 6.5 and the NVIDIA binary GPU drivers
  CUDA 7.0 and the NVIDIA binary GPU drivers
  CUDA 7.5 and the NVIDIA binary GPU drivers
  intel compiler 15.0.0
  gcc 4.4.6
  Bash (required for setting environment variables)


=== Steps - Initial Setup and Simple Run

Follow these steps to setup and run the code the first time. The sample 
commands are for a user with home directory "/home/smith/“ and who has unpacked 
the GeauxDock distribution into a directory “geauxdock/“, so that the path to the 
readme file would be “/home/smith/geauxdock/README.txt”.

 [ ]  Install Prerequisites
      Review the list of prerequisites, and install what is
      needed.


 [ ]  Prepare The Input Data
      Commands:

      $ cd /home/smith/geauxdock/run
      $ ./mklist.sh


 [ ]  Run The pre-build binary (Linux x86-64, CPU)
      Commands:

      $ cd /home/smith/geauxdock/bin
      $ export OMP_PROC_BIND=true
      $ export OMP_NUM_THREADS=20
      $ ./geauxdock_linux_x64 -ll ./astex/ligands/list.txt -lp ./astex/proteins/prt.txt -nt 1


 [ ]  Build the Code
      Commands:

      $ cd /home/smith/geauxdock/src/module/yeah && make -B
      $ source home/smith/geauxdock/src/module/sourceme.bash


      $ cd /home/smith/geauxdock/src/main_cpu && make HOST=smic
      or
      $ cd /home/smith/geauxdock/src/main_mic && make HOST=smic
      or
      $ cd /home/smith/geauxdock/src/main_gpu && make HOST=smic

      Building variables are speficied in
      /home/smith/geauxdock/src/GNUmakefile.common.mk
      eg: HOST, COMPILER_HOST, GPU ...
      They might be modifity to suit your environment.

      If the build is successful a executable named "geauxdock" will be created
      in the current directory.  If not, find an experienced programmer
      to help identify and fix the problems.


 [ ]  Run The Code
      The command below will run GeauxDock using the provided parameter files.

      $ export OMP_PROC_BIND=true
      $ export OMP_NUM_THREADS=20
      $ cd /home/smith/geauxdock/src/main_cpu && make run

      or

      $ export OMP_PROC_BIND=true
      $ export OMP_NUM_THREADS=240
      $ export MIC_OMP_PROC_BIND=true
      $ cd /home/smith/dock/src/main_mic && make run

      or

      $ cd /home/smith/dock/src/main_gpu && make run

      or

      $ cd /home/smith/dock/data
      $ PATH/TO/geauxdock -ll ./astex/ligands/list.txt -lp ./astex/proteins/prt.txt -nt 1


      The execution using the provided inputs and parameter files should complete
      in a few seconds.


  [ ]  Results Verification
       In case of a successful simulation using the example input files of
       "1a07C1.sdf" and "1a07C-1.pdb"
       initial energy state as part of standard output should agree with the
       lines below:

       0 0 0.6434 -0.0367 -0.2079 -0.1845 0.8521 -0.8880 0.0523 0.1744 -1.0000 0.7735
       0 0 0.6434 -0.0367 -0.2079 -0.1845 0.8521 -0.8880 0.0523 0.1744 -1.0000 0.7735 Ref Result
       ...
       Benchmark,              1a07C1.sdf,1a07C-1.pdb,100,100,51,1,1,51,34,344,454,11,150.459




=== Documentation of Features

== Command-line options

-lp protein_text_file
    a target protein
    default:   /home/smith/geauxdock/data/astex/proteins/prt.txt

-ll ligand_text_file
    a list of ligands to be docked
    default:   /home/smith/geauxdock/data/astex/ligands/ligs.txt

-s ff_file
    force field parameters to calculate ligand-target interaction

-opt opt_file
    optimized weights assigned to energy components

-na
    linear normalization parameter a

-nb
    linear normalization parameter b

-para
    energy calculation parameters

-ns <integer>
    total Monte Carlo steps, 3000 by default
    This iteration parameter should be multiple of STEPS_PER_DUMP 
    (defined in src/size.h).

-nc <integer>
    Monte Carlo steps between two consecutive replica exchange, 5 by default
    This iteration parameter should divide STEPS_PER_DUMP 
    (defined in src/size.h).

-floor_temp <float>
    floor temperature set for the replicas, 0.004 by default

-ceiling_temp <float>
    ceiling temperature set for the replicas, 0.036 by default

-nt <integer>
    temperature replica numbers, 1 by default

-t <float>
    transnational scale in each perturbation of the ligand, 0.02 (in Angstrom) 
    by default

-r <float>
    rotational scale in each perturbation of the ligand, 0.08 (in Angstrom) by 
    default



== The definitions of default command-line options

The default arguments are specified in source code "src/frontend/util.C":
void ParseArguments (int argc, char **argv, ...)
{
    // ...
    std::string basedir ("../data/");
    inputfiles->lig_list = basedir + "astex/ligands/ligs.txt";
    inputfiles->prt_list = basedir + "astex/proteins/prt.txt";
    inputfiles->weight_file.path = basedir + "parameters/08ff_opt";
    inputfiles->enepara_file.path = basedir + "parameters/paras";
    inputfiles->norpara_file.path_a = basedir + "parameters/08_nor_a";
    inputfiles->norpara_file.path_b = basedir + "parameters/08_nor_b";
    exchgpara->floor_temp = 0.044f;
    exchgpara->ceiling_temp = 0.036f;
    exchgpara->num_temp = 1;
    ts = 0.02f;
    rs = 0.08f;
    // ...
}



== Input file formats
1. sdf
   ligand input file (http://en.wikipedia.org/wiki/Chemical_table_file#SDF)

2. pdb
   protein input file (http://www.rcsb.org/pdb/home/home.do)

3. ff
   force field parameters that can be generated using utils/prepare_ff and 
   files generated by eFindSite (http://brylinski.cct.lsu.edu/efindsite)











== Output format
screen output, including 
   * info on input and output data paths
   * simulation parameter setup
   * runtime performance measurements


=== Development History

== Discussion of the code origin
GeauxDock was designed to use computer-generated protein models as targets for 
small molecule docking in structure-based drug discovery. The current 
high-performance implementation is based on a serial C++ version written by 
Michal Brylinski at Louisiana State University.


== Changes in each release.
Third release.

